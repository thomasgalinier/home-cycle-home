/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthSigninRouteImport } from './routes/auth/Signin'
import { Route as AuthenticatedPlanningRouteImport } from './routes/_authenticated/planning'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedPlanningIndexRouteImport } from './routes/_authenticated/planning/index'
import { Route as AuthenticatedForfaitIndexRouteImport } from './routes/_authenticated/forfait/index'
import { Route as AuthenticatedComptesIndexRouteImport } from './routes/_authenticated/comptes/index'
import { Route as AuthenticatedCarteIndexRouteImport } from './routes/_authenticated/carte/index'
import { Route as AuthenticatedForfaitCreateRouteImport } from './routes/_authenticated/forfait/create'
import { Route as AuthenticatedComptesCreateRouteImport } from './routes/_authenticated/comptes/create'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/Signin',
  path: '/Signin',
  getParentRoute: () => AuthRoute,
} as any)
const AuthenticatedPlanningRoute = AuthenticatedPlanningRouteImport.update({
  id: '/planning',
  path: '/planning',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedPlanningIndexRoute =
  AuthenticatedPlanningIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedPlanningRoute,
  } as any)
const AuthenticatedForfaitIndexRoute =
  AuthenticatedForfaitIndexRouteImport.update({
    id: '/forfait/',
    path: '/forfait/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedComptesIndexRoute =
  AuthenticatedComptesIndexRouteImport.update({
    id: '/comptes/',
    path: '/comptes/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCarteIndexRoute = AuthenticatedCarteIndexRouteImport.update({
  id: '/carte/',
  path: '/carte/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedForfaitCreateRoute =
  AuthenticatedForfaitCreateRouteImport.update({
    id: '/forfait/create',
    path: '/forfait/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedComptesCreateRoute =
  AuthenticatedComptesCreateRouteImport.update({
    id: '/comptes/create',
    path: '/comptes/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/planning': typeof AuthenticatedPlanningRouteWithChildren
  '/auth/Signin': typeof AuthSigninRoute
  '/': typeof AuthenticatedIndexRoute
  '/comptes/create': typeof AuthenticatedComptesCreateRoute
  '/forfait/create': typeof AuthenticatedForfaitCreateRoute
  '/carte': typeof AuthenticatedCarteIndexRoute
  '/comptes': typeof AuthenticatedComptesIndexRoute
  '/forfait': typeof AuthenticatedForfaitIndexRoute
  '/planning/': typeof AuthenticatedPlanningIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/auth/Signin': typeof AuthSigninRoute
  '/': typeof AuthenticatedIndexRoute
  '/comptes/create': typeof AuthenticatedComptesCreateRoute
  '/forfait/create': typeof AuthenticatedForfaitCreateRoute
  '/carte': typeof AuthenticatedCarteIndexRoute
  '/comptes': typeof AuthenticatedComptesIndexRoute
  '/forfait': typeof AuthenticatedForfaitIndexRoute
  '/planning': typeof AuthenticatedPlanningIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/planning': typeof AuthenticatedPlanningRouteWithChildren
  '/auth/Signin': typeof AuthSigninRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/comptes/create': typeof AuthenticatedComptesCreateRoute
  '/_authenticated/forfait/create': typeof AuthenticatedForfaitCreateRoute
  '/_authenticated/carte/': typeof AuthenticatedCarteIndexRoute
  '/_authenticated/comptes/': typeof AuthenticatedComptesIndexRoute
  '/_authenticated/forfait/': typeof AuthenticatedForfaitIndexRoute
  '/_authenticated/planning/': typeof AuthenticatedPlanningIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/dashboard'
    | '/planning'
    | '/auth/Signin'
    | '/'
    | '/comptes/create'
    | '/forfait/create'
    | '/carte'
    | '/comptes'
    | '/forfait'
    | '/planning/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/dashboard'
    | '/auth/Signin'
    | '/'
    | '/comptes/create'
    | '/forfait/create'
    | '/carte'
    | '/comptes'
    | '/forfait'
    | '/planning'
  id:
    | '__root__'
    | '/_authenticated'
    | '/auth'
    | '/_authenticated/dashboard'
    | '/_authenticated/planning'
    | '/auth/Signin'
    | '/_authenticated/'
    | '/_authenticated/comptes/create'
    | '/_authenticated/forfait/create'
    | '/_authenticated/carte/'
    | '/_authenticated/comptes/'
    | '/_authenticated/forfait/'
    | '/_authenticated/planning/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/auth/Signin': {
      id: '/auth/Signin'
      path: '/Signin'
      fullPath: '/auth/Signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_authenticated/planning': {
      id: '/_authenticated/planning'
      path: '/planning'
      fullPath: '/planning'
      preLoaderRoute: typeof AuthenticatedPlanningRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/planning/': {
      id: '/_authenticated/planning/'
      path: '/'
      fullPath: '/planning/'
      preLoaderRoute: typeof AuthenticatedPlanningIndexRouteImport
      parentRoute: typeof AuthenticatedPlanningRoute
    }
    '/_authenticated/forfait/': {
      id: '/_authenticated/forfait/'
      path: '/forfait'
      fullPath: '/forfait'
      preLoaderRoute: typeof AuthenticatedForfaitIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/comptes/': {
      id: '/_authenticated/comptes/'
      path: '/comptes'
      fullPath: '/comptes'
      preLoaderRoute: typeof AuthenticatedComptesIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/carte/': {
      id: '/_authenticated/carte/'
      path: '/carte'
      fullPath: '/carte'
      preLoaderRoute: typeof AuthenticatedCarteIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/forfait/create': {
      id: '/_authenticated/forfait/create'
      path: '/forfait/create'
      fullPath: '/forfait/create'
      preLoaderRoute: typeof AuthenticatedForfaitCreateRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/comptes/create': {
      id: '/_authenticated/comptes/create'
      path: '/comptes/create'
      fullPath: '/comptes/create'
      preLoaderRoute: typeof AuthenticatedComptesCreateRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedPlanningRouteChildren {
  AuthenticatedPlanningIndexRoute: typeof AuthenticatedPlanningIndexRoute
}

const AuthenticatedPlanningRouteChildren: AuthenticatedPlanningRouteChildren = {
  AuthenticatedPlanningIndexRoute: AuthenticatedPlanningIndexRoute,
}

const AuthenticatedPlanningRouteWithChildren =
  AuthenticatedPlanningRoute._addFileChildren(
    AuthenticatedPlanningRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedPlanningRoute: typeof AuthenticatedPlanningRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedComptesCreateRoute: typeof AuthenticatedComptesCreateRoute
  AuthenticatedForfaitCreateRoute: typeof AuthenticatedForfaitCreateRoute
  AuthenticatedCarteIndexRoute: typeof AuthenticatedCarteIndexRoute
  AuthenticatedComptesIndexRoute: typeof AuthenticatedComptesIndexRoute
  AuthenticatedForfaitIndexRoute: typeof AuthenticatedForfaitIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedPlanningRoute: AuthenticatedPlanningRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedComptesCreateRoute: AuthenticatedComptesCreateRoute,
  AuthenticatedForfaitCreateRoute: AuthenticatedForfaitCreateRoute,
  AuthenticatedCarteIndexRoute: AuthenticatedCarteIndexRoute,
  AuthenticatedComptesIndexRoute: AuthenticatedComptesIndexRoute,
  AuthenticatedForfaitIndexRoute: AuthenticatedForfaitIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface AuthRouteChildren {
  AuthSigninRoute: typeof AuthSigninRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSigninRoute: AuthSigninRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
